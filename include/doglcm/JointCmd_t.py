"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class JointCmd_t(object):
    __slots__ = ["joint_id", "mode", "Pos", "W", "T", "K_P", "K_W"]

    __typenames__ = ["int8_t", "int8_t", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.joint_id = 0
        self.mode = 0
        self.Pos = 0.0
        self.W = 0.0
        self.T = 0.0
        self.K_P = 0.0
        self.K_W = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(JointCmd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbfffff", self.joint_id, self.mode, self.Pos, self.W, self.T, self.K_P, self.K_W))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != JointCmd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return JointCmd_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = JointCmd_t()
        self.joint_id, self.mode, self.Pos, self.W, self.T, self.K_P, self.K_W = struct.unpack(">bbfffff", buf.read(22))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if JointCmd_t in parents: return 0
        tmphash = (0x998a469499333882) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if JointCmd_t._packed_fingerprint is None:
            JointCmd_t._packed_fingerprint = struct.pack(">Q", JointCmd_t._get_hash_recursive([]))
        return JointCmd_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", JointCmd_t._get_packed_fingerprint())[0]

