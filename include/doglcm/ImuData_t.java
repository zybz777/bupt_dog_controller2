/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package doglcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ImuData_t implements lcm.lcm.LCMEncodable
{
    public double quaternion[];
    public double rpy[];
    public double angular_velocity[];
    public double linear_accelerometer[];
    public double gps_pos[];
    public double gps_vel[];
 
    public ImuData_t()
    {
        quaternion = new double[4];
        rpy = new double[3];
        angular_velocity = new double[3];
        linear_accelerometer = new double[3];
        gps_pos = new double[3];
        gps_vel = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe37ccd754a6105c8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(doglcm.ImuData_t.class))
            return 0L;
 
        classes.add(doglcm.ImuData_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.quaternion[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.angular_velocity[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.linear_accelerometer[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.gps_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.gps_vel[a]); 
        }
 
    }
 
    public ImuData_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ImuData_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static doglcm.ImuData_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        doglcm.ImuData_t o = new doglcm.ImuData_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.quaternion = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quaternion[a] = ins.readDouble();
        }
 
        this.rpy = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readDouble();
        }
 
        this.angular_velocity = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.angular_velocity[a] = ins.readDouble();
        }
 
        this.linear_accelerometer = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.linear_accelerometer[a] = ins.readDouble();
        }
 
        this.gps_pos = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gps_pos[a] = ins.readDouble();
        }
 
        this.gps_vel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gps_vel[a] = ins.readDouble();
        }
 
    }
 
    public doglcm.ImuData_t copy()
    {
        doglcm.ImuData_t outobj = new doglcm.ImuData_t();
        outobj.quaternion = new double[(int) 4];
        System.arraycopy(this.quaternion, 0, outobj.quaternion, 0, 4); 
        outobj.rpy = new double[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.angular_velocity = new double[(int) 3];
        System.arraycopy(this.angular_velocity, 0, outobj.angular_velocity, 0, 3); 
        outobj.linear_accelerometer = new double[(int) 3];
        System.arraycopy(this.linear_accelerometer, 0, outobj.linear_accelerometer, 0, 3); 
        outobj.gps_pos = new double[(int) 3];
        System.arraycopy(this.gps_pos, 0, outobj.gps_pos, 0, 3); 
        outobj.gps_vel = new double[(int) 3];
        System.arraycopy(this.gps_vel, 0, outobj.gps_vel, 0, 3); 
        return outobj;
    }
 
}

