/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package doglcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class LegCmd_t implements lcm.lcm.LCMEncodable
{
    public byte leg_id;
    public doglcm.JointCmd_t joint_cmd[];
 
    public LegCmd_t()
    {
        joint_cmd = new doglcm.JointCmd_t[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xfce1595f03ce06e6L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(doglcm.LegCmd_t.class))
            return 0L;
 
        classes.add(doglcm.LegCmd_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + doglcm.JointCmd_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.leg_id); 
 
        for (int a = 0; a < 3; a++) {
            this.joint_cmd[a]._encodeRecursive(outs); 
        }
 
    }
 
    public LegCmd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public LegCmd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static doglcm.LegCmd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        doglcm.LegCmd_t o = new doglcm.LegCmd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.leg_id = ins.readByte();
 
        this.joint_cmd = new doglcm.JointCmd_t[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.joint_cmd[a] = doglcm.JointCmd_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public doglcm.LegCmd_t copy()
    {
        doglcm.LegCmd_t outobj = new doglcm.LegCmd_t();
        outobj.leg_id = this.leg_id;
 
        outobj.joint_cmd = new doglcm.JointCmd_t[(int) 3];
        for (int a = 0; a < 3; a++) {
            outobj.joint_cmd[a] = this.joint_cmd[a].copy();
        }
 
        return outobj;
    }
 
}

