/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package doglcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class JointCmd_t implements lcm.lcm.LCMEncodable
{
    public byte joint_id;
    public byte mode;
    public float Pos;
    public float W;
    public float T;
    public float K_P;
    public float K_W;
 
    public JointCmd_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x998a469499333882L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(doglcm.JointCmd_t.class))
            return 0L;
 
        classes.add(doglcm.JointCmd_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.joint_id); 
 
        outs.writeByte(this.mode); 
 
        outs.writeFloat(this.Pos); 
 
        outs.writeFloat(this.W); 
 
        outs.writeFloat(this.T); 
 
        outs.writeFloat(this.K_P); 
 
        outs.writeFloat(this.K_W); 
 
    }
 
    public JointCmd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public JointCmd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static doglcm.JointCmd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        doglcm.JointCmd_t o = new doglcm.JointCmd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.joint_id = ins.readByte();
 
        this.mode = ins.readByte();
 
        this.Pos = ins.readFloat();
 
        this.W = ins.readFloat();
 
        this.T = ins.readFloat();
 
        this.K_P = ins.readFloat();
 
        this.K_W = ins.readFloat();
 
    }
 
    public doglcm.JointCmd_t copy()
    {
        doglcm.JointCmd_t outobj = new doglcm.JointCmd_t();
        outobj.joint_id = this.joint_id;
 
        outobj.mode = this.mode;
 
        outobj.Pos = this.Pos;
 
        outobj.W = this.W;
 
        outobj.T = this.T;
 
        outobj.K_P = this.K_P;
 
        outobj.K_W = this.K_W;
 
        return outobj;
    }
 
}

